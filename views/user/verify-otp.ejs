<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>OTP Verification</title>
    <link rel="stylesheet" href="../../styles/user/varify-otp.css">
</head>

<body>
    <div class="container">
        <h1>OTP Verification</h1>
        <p>We have sent a 6-digit verification code to your registered email address</p>



        <div class="otp-container">
            <input type="text" class="otp-input" maxlength="1" autofocus data-index="0">
            <input type="text" class="otp-input" maxlength="1" data-index="1">
            <input type="text" class="otp-input" maxlength="1" data-index="2">
            <input type="text" class="otp-input" maxlength="1" data-index="3">
            <input type="text" class="otp-input" maxlength="1" data-index="4">
            <input type="text" class="otp-input" maxlength="1" data-index="5">
        </div>

        <div class="error-message" id="error-message"></div>

        <div class="timer" id="timer">Timer: 00:30</div>

        <div class="button-container">
            <button class="btn btn-primary" id="verify-btn">Verify OTP</button>
            <button class="btn btn-secondary" id="resend-btn" disabled>Resend OTP</button>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        // OTP Validation Class
        class OTPValidator {
            constructor() {
                this.otpInputs = document.querySelectorAll('.otp-input');
                this.errorMessage = document.getElementById('error-message');
                this.verifyButton = document.getElementById('verify-btn');
                this.setupEventListeners();
            }

            setupEventListeners() {
                this.otpInputs.forEach((input, index) => {
                    // Input validation and navigation
                    input.addEventListener('input', (e) => this.handleInput(e, index));
                    input.addEventListener('keydown', (e) => this.handleKeyDown(e, index));
                    input.addEventListener('paste', (e) => this.handlePaste(e));
                    input.addEventListener('blur', () => this.validateInput(input));
                });
            }

            handleInput(e, index) {
                const value = e.target.value;
                
                // Allow only numbers
                if (!/^\d*$/.test(value)) {
                    e.target.value = '';
                    this.showError('Only numbers are allowed');
                    this.markInputAsError(e.target);
                    return;
                }

                // Clear error state
                this.clearError();
                this.markInputAsSuccess(e.target);

                // Auto-focus next input
                if (value.length === 1 && index < this.otpInputs.length - 1) {
                    this.otpInputs[index + 1].focus();
                }

                // Enable/disable verify button
                this.toggleVerifyButton();
            }

            handleKeyDown(e, index) {
                // Handle backspace
                if (e.key === 'Backspace') {
                    if (e.target.value === '' && index > 0) {
                        this.otpInputs[index - 1].focus();
                    }
                }
                
                // Handle arrow keys
                if (e.key === 'ArrowLeft' && index > 0) {
                    this.otpInputs[index - 1].focus();
                    e.preventDefault();
                }
                if (e.key === 'ArrowRight' && index < this.otpInputs.length - 1) {
                    this.otpInputs[index + 1].focus();
                    e.preventDefault();
                }

                // Handle Enter key
                if (e.key === 'Enter') {
                    this.verifyOTP();
                }
            }

            handlePaste(e) {
                e.preventDefault();
                const pastedData = e.clipboardData.getData('text').trim();
                
                // Validate pasted data
                if (!/^\d{6}$/.test(pastedData)) {
                    this.showError('Please paste a valid 6-digit OTP');
                    return;
                }

                // Fill inputs with pasted data
                for (let i = 0; i < 6; i++) {
                    this.otpInputs[i].value = pastedData[i];
                    this.markInputAsSuccess(this.otpInputs[i]);
                }

                this.clearError();
                this.toggleVerifyButton();
                this.otpInputs[5].focus();
            }

            validateInput(input) {
                if (input.value && !/^\d$/.test(input.value)) {
                    this.markInputAsError(input);
                    this.showError('Invalid character entered');
                } else if (input.value) {
                    this.markInputAsSuccess(input);
                } else {
                    this.clearInputState(input);
                }
            }

            getOTPValue() {
                return Array.from(this.otpInputs).map(input => input.value.trim()).join('');
            }

            validateOTP() {
                const otpValue = this.getOTPValue();
                
                // Check if all fields are filled
                if (otpValue.length !== 6) {
                    this.showError('Please enter all 6 digits');
                    this.highlightEmptyInputs();
                    return false;
                }

                // Check if all are numbers
                if (!/^\d{6}$/.test(otpValue)) {
                    this.showError('OTP must contain only numbers');
                    return false;
                }

                this.clearError();
                return true;
            }

            highlightEmptyInputs() {
                this.otpInputs.forEach(input => {
                    if (!input.value.trim()) {
                        this.markInputAsError(input);
                    }
                });
            }

            showError(message) {
                this.errorMessage.textContent = message;
                this.errorMessage.style.color = '#ef4444';
            }

            clearError() {
                this.errorMessage.textContent = '';
            }

            markInputAsError(input) {
                input.classList.remove('success');
                input.classList.add('error');
            }

            markInputAsSuccess(input) {
                input.classList.remove('error');
                input.classList.add('success');
            }

            clearInputState(input) {
                input.classList.remove('error', 'success');
            }

            clearAllInputs() {
                this.otpInputs.forEach(input => {
                    input.value = '';
                    this.clearInputState(input);
                });
                this.clearError();
                this.toggleVerifyButton();
                this.otpInputs[0].focus();
            }

            toggleVerifyButton() {
                const otpValue = this.getOTPValue();
                this.verifyButton.disabled = otpValue.length !== 6;
            }

            verifyOTP() {
                if (!this.validateOTP()) {
                    return;
                }

                const otpValue = this.getOTPValue();
                
                // Show loading state
                this.verifyButton.classList.add('loading');
                this.verifyButton.disabled = true;
                this.verifyButton.textContent = '';

                // Simulate API call
                fetch("verify-otp", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({ otp: otpValue })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire({
                            icon: "success",
                            title: "OTP verified successfully",
                            showConfirmButton: false,
                            timer: 1500
                        }).then(() => {
                            window.location.href = data.redirectUrl || '/dashboard';
                        });
                    } else {
                        this.showError(data.message || 'Invalid OTP. Please try again.');
                        this.highlightAllInputsAsError();
                    }
                })
                .catch(error => {
                    console.error("Error:", error);
                    this.showError('Verification failed. Please try again.');
                    this.highlightAllInputsAsError();
                })
                .finally(() => {
                    // Reset button state
                    this.verifyButton.classList.remove('loading');
                    this.verifyButton.disabled = false;
                    this.verifyButton.textContent = 'Verify OTP';
                });
            }

            highlightAllInputsAsError() {
                this.otpInputs.forEach(input => {
                    this.markInputAsError(input);
                });
            }
        }

        // Timer Management Class
        class TimerManager {
            constructor(duration = 30) {
                this.duration = duration;
                this.timerElement = document.getElementById('timer');
                this.resendButton = document.getElementById('resend-btn');
                this.timeLeft = 0;
                this.timerInterval = null;
                this.initialize();
            }

            initialize() {
                const storedEndTime = sessionStorage.getItem('otpTimerEndTime');
                
                if (storedEndTime) {
                    const endTime = parseInt(storedEndTime);
                    const currentTime = Date.now();
                    const remainingSeconds = Math.max(0, Math.ceil((endTime - currentTime) / 1000));
                    this.timeLeft = remainingSeconds;
                } else {
                    this.timeLeft = this.duration;
                    this.storeEndTime();
                }
                
                this.updateDisplay();
                if (this.timeLeft > 0) {
                    this.start();
                }
            }

            start() {
                this.timerInterval = setInterval(() => {
                    this.timeLeft--;
                    this.updateDisplay();
                    
                    if (this.timeLeft <= 0) {
                        this.expire();
                    }
                }, 1000);
            }

            updateDisplay() {
                const minutes = Math.floor(this.timeLeft / 60);
                const seconds = this.timeLeft % 60;
                this.timerElement.textContent = `Timer: ${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
                
                // Change color when time is running low
                if (this.timeLeft <= 10) {
                    this.timerElement.style.color = '#ef4444';
                } else {
                    this.timerElement.style.color = '#6366f1';
                }
            }

            expire() {
                clearInterval(this.timerInterval);
                this.timerElement.textContent = 'Time expired';
                this.timerElement.classList.add('expired');
                this.resendButton.disabled = false;
                sessionStorage.removeItem('otpTimerEndTime');
                
                // Show expiration notification
                Swal.fire({
                    icon: 'warning',
                    title: 'OTP Expired',
                    text: 'Please request a new OTP',
                    timer: 3000,
                    showConfirmButton: false
                });
            }

            reset() {
                clearInterval(this.timerInterval);
                this.timeLeft = this.duration;
                this.timerElement.classList.remove('expired');
                this.resendButton.disabled = true;
                this.storeEndTime();
                this.updateDisplay();
                this.start();
            }

            storeEndTime() {
                const endTime = Date.now() + (this.timeLeft * 1000);
                sessionStorage.setItem('otpTimerEndTime', endTime.toString());
            }
        }

        // Initialize components
        const otpValidator = new OTPValidator();
        const timerManager = new TimerManager(30);

        // Verify button event listener
        document.getElementById('verify-btn').addEventListener('click', () => {
            otpValidator.verifyOTP();
        });

        // Resend button event listener
        document.getElementById('resend-btn').addEventListener('click', () => {
            // Show loading state
            const resendBtn = document.getElementById('resend-btn');
            resendBtn.classList.add('loading');
            resendBtn.disabled = true;
            resendBtn.textContent = '';

            Swal.fire({
                title: 'Sending OTP...',
                allowOutsideClick: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });

            // Make API call to resend OTP
            fetch('/resend-otp', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'OTP Sent',
                        text: 'A new OTP has been sent to your email.',
                        timer: 2000,
                        showConfirmButton: false
                    });

                    // Reset everything
                    timerManager.reset();
                    otpValidator.clearAllInputs();
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: data.message || 'Failed to resend OTP. Please try again.'
                    });
                    resendBtn.disabled = false;
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to resend OTP. Please try again.'
                });
                resendBtn.disabled = false;
            })
            .finally(() => {
                // Reset button state
                resendBtn.classList.remove('loading');
                resendBtn.textContent = 'Resend OTP';
            });
        });

        // Auto-clear error message after 5 seconds
        let errorTimeout;
        const originalShowError = otpValidator.showError;
        otpValidator.showError = function(message) {
            originalShowError.call(this, message);
            clearTimeout(errorTimeout);
            errorTimeout = setTimeout(() => {
                this.clearError();
            }, 5000);
        };

        // Prevent form submission on Enter key globally
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                otpValidator.verifyOTP();
            }
        });

        // Focus management - ensure at least one input is always focused
        document.addEventListener('click', (e) => {
            if (!e.target.classList.contains('otp-input') && !e.target.classList.contains('btn')) {
                // Find first empty input or last filled input
                const emptyInput = Array.from(otpValidator.otpInputs).find(input => !input.value);
                if (emptyInput) {
                    emptyInput.focus();
                } else {
                    otpValidator.otpInputs[5].focus();
                }
            }
        });
    </script>
</body>

</html>




