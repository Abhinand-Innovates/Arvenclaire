
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="../../styles/admin/customer-listing.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <%- include("../partials/admin/sidebar") %>
    <!-- Main Content -->
    <div class="main-content">
        <!-- Page Header -->
        <div class="page-header">
            <h1 class="page-title">Customer Management</h1>
            <p class="page-subtitle">Manage and view all registered customers</p>
        </div>

        <!-- Customer Table Container -->
        <div class="customer-table-container">
            <!-- Table Controls -->
            <div class="table-controls">
                <div class="search-box">
                    <i class="fas fa-search"></i>
                    <input type="text" class="form-control" id="customerSearch" placeholder="Search customers...">
                </div>
                <div class="filter-controls">
                    <select class="form-select" id="statusFilter" style="width: auto;">
                        <option value="">All Status</option>
                        <option value="active">Active</option>
                        <option value="blocked">Blocked</option>
                    </select>
                </div>
            </div>

            <!-- Customers Table -->
            <div class="table-responsive">
                <table class="customers-table">
                    <thead>
                        <tr>
                            <th>Customer</th>
                            <th>Email</th>
                            <th>Phone</th>
                            <th>Join Date</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="customersTableBody">
                        <!-- Customer rows will be populated here -->
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            <div class="pagination-container">
                <div class="pagination-info">
                    Showing <span id="showingStart">1</span> to <span id="showingEnd">10</span> of <span id="totalCustomers">0</span> customers
                </div>
                <nav aria-label="Customer pagination">
                    <ul class="pagination pagination-sm mb-0">
                        <li class="page-item" id="prevPage">
                            <a class="page-link" href="#" aria-label="Previous">
                                <span aria-hidden="true">«</span>
                            </a>
                        </li>
                        <!-- Pagination items will be populated here -->
                    </ul>
                </nav>
            </div>
        </div>
    </div>

    <script>
        let currentPage = 1;
        let customersPerPage = 5;
        let filteredCustomers = [];

        document.addEventListener('DOMContentLoaded', function() {
            const customerSearch = document.getElementById('customerSearch');
            const statusFilter = document.getElementById('statusFilter');
            const prevPage = document.getElementById('prevPage');
            const paginationContainer = document.querySelector('.pagination');

            // Fetch and render customers on page load
            fetchCustomers();

            // Search functionality
            customerSearch.addEventListener('input', function() {
                currentPage = 1;
                filterCustomers();
            });

            // Status filter functionality
            statusFilter.addEventListener('change', function() {
                currentPage = 1;
                filterCustomers();
            });

            // Pagination: Previous page
            prevPage.addEventListener('click', function(e) {
                e.preventDefault();
                if (currentPage > 1) {
                    currentPage--;
                    renderCustomersTable();
                    updatePagination();
                }
            });

            // Pagination: Page numbers
            paginationContainer.addEventListener('click', function(e) {
                e.preventDefault();
                if (e.target.classList.contains('page-link') && !e.target.parentElement.classList.contains('active')) {
                    if (e.target.textContent === '»') {
                        if (currentPage < Math.ceil(filteredCustomers.length / customersPerPage)) {
                            currentPage++;
                            renderCustomersTable();
                            updatePagination();
                        }
                    } else if (!isNaN(e.target.textContent)) {
                        currentPage = parseInt(e.target.textContent);
                        renderCustomersTable();
                        updatePagination();
                    }
                }
            });
        });

        async function fetchCustomers() {
            try {
                const response = await fetch('/api/admin/customers', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                const data = await response.json();
                if (data.success) {
                    filteredCustomers = data.customers.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
                    renderCustomersTable();
                    updatePagination();
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Failed to fetch customers.'
                    });
                }
            } catch (error) {
                console.error('Fetch customers error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An error occurred while fetching customers.'
                });
            }
        }

        function filterCustomers() {
            const searchTerm = document.getElementById('customerSearch').value.toLowerCase();
            const statusFilter = document.getElementById('statusFilter').value;

            filteredCustomers = filteredCustomers.filter(customer => {
                const matchesSearch = customer.fullname.toLowerCase().includes(searchTerm) ||
                                    customer.email.toLowerCase().includes(searchTerm) ||
                                    (customer.phone && customer.phone.includes(searchTerm));
                const matchesStatus = !statusFilter || (statusFilter === 'active' ? !customer.isBlocked : customer.isBlocked);
                return matchesSearch && matchesStatus;
            });

            renderCustomersTable();
            updatePagination();
        }

        function renderCustomersTable() {
            const startIndex = (currentPage - 1) * customersPerPage;
            const endIndex = startIndex + customersPerPage;
            const paginatedCustomers = filteredCustomers.slice(startIndex, endIndex);

            const tableBody = document.getElementById('customersTableBody');
            tableBody.innerHTML = '';

            paginatedCustomers.forEach(customer => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>
                        <div class="customer-info">
                            <div class="customer-avatar">
                                ${customer.fullname.charAt(0).toUpperCase()}
                            </div>
                            <div class="customer-details">
                                <h6>${customer.fullname}</h6>
                                <p>ID: #${customer._id.toString().padStart(4, '0')}</p>
                            </div>
                        </div>
                    </td>
                    <td>${customer.email}</td>
                    <td>${customer.phone || 'N/A'}</td>
                    <td>${new Date(customer.createdAt).toLocaleDateString()}</td>
                    <td>
                        <span class="status-badge status-${customer.isBlocked ? 'blocked' : 'active'}">
                            ${customer.isBlocked ? 'Blocked' : 'Active'}
                        </span>
                    </td>
                    <td>
                        <div class="action-buttons">
                            <button class="btn-action btn-view" onclick="viewCustomer('${customer._id}')">
                                <i class="fas fa-eye"></i>
                            </button>
                            <button class="btn-action btn-toggle ${customer.isBlocked ? 'blocked' : ''}" onclick="toggleCustomerStatus('${customer._id}')">
                                ${customer.isBlocked ? 'Activate' : 'Block'}
                            </button>
                        </div>
                    </td>
                `;
                tableBody.appendChild(row);
            });

            // Update pagination info
            document.getElementById('showingStart').textContent = startIndex + 1;
            document.getElementById('showingEnd').textContent = Math.min(endIndex, filteredCustomers.length);
            document.getElementById('totalCustomers').textContent = filteredCustomers.length;
        }

        function updatePagination() {
            const paginationContainer = document.querySelector('.pagination');
            const totalPages = Math.ceil(filteredCustomers.length / customersPerPage);
            paginationContainer.innerHTML = `
                <li class="page-item ${currentPage === 1 ? 'disabled' : ''}" id="prevPage">
                    <a class="page-link" href="#" aria-label="Previous">
                        <span aria-hidden="true">«</span>
                    </a>
                </li>
            `;

            for (let i = 1; i <= totalPages; i++) {
                paginationContainer.innerHTML += `
                    <li class="page-item ${i === currentPage ? 'active' : ''}">
                        <a class="page-link" href="#">${i}</a>
                    </li>
                `;
            }

            paginationContainer.innerHTML += `
                <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}" id="nextPage">
                    <a class="page-link" href="#" aria-label="Next">
                        <span aria-hidden="true">»</span>
                    </a>
                </li>
            `;
        }

        function viewCustomer(customerId) {
            const customer = filteredCustomers.find(c => c._id === customerId);
            if (customer) {
                Swal.fire({
                    title: 'Customer Details',
                    html: `
                        <div class="text-start">
                            <p><strong>Name:</strong> ${customer.fullname}</p>
                            <p><strong>Email:</strong> ${customer.email}</p>
                            <p><strong>Phone:</strong> ${customer.phone || 'N/A'}</p>
                            <p><strong>Join Date:</strong> ${new Date(customer.createdAt).toLocaleDateString()}</p>
                            <p><strong>Status:</strong> <span class="status-badge status-${customer.isBlocked ? 'blocked' : 'active'}">${customer.isBlocked ? 'Blocked' : 'Active'}</span></p>
                        </div>
                    `,
                    confirmButtonColor: '#000000'
                });
            }
        }

        async function toggleCustomerStatus(customerId) {
            const customer = filteredCustomers.find(c => c._id === customerId);
            if (customer) {
                const newStatus = customer.isBlocked ? 'active' : 'blocked';
                const actionText = newStatus === 'blocked' ? 'block' : 'activate';

                const result = await Swal.fire({
                    title: 'Confirm Status Change',
                    text: `Are you sure you want to ${actionText} ${customer.fullname}?`,
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonColor: '#000000',
                    cancelButtonColor: '#6c757d',
                    confirmButtonText: `Yes, ${actionText.charAt(0).toUpperCase() + actionText.slice(1)}`,
                    cancelButtonText: 'Cancel'
                });

                if (result.isConfirmed) {
                    try {
                        const response = await fetch(`/api/admin/toggle-status/${customerId}`, {
                            method: 'PATCH',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ isBlocked: newStatus === 'blocked' })
                        });

                        const data = await response.json();
                        if (data.success) {
                            customer.isBlocked = newStatus === 'blocked';
                            renderCustomersTable();
                            updatePagination();
                            Swal.fire({
                                title: 'Success!',
                                text: `Customer has been ${newStatus === 'blocked' ? 'blocked' : 'activated'}.`,
                                icon: 'success',
                                confirmButtonColor: '#000000'
                            });
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: data.message || 'Failed to update customer status.'
                            });
                        }
                    } catch (error) {
                        console.error('Toggle status error:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'An error occurred while updating customer status.'
                        });
                    }
                }
            }
        }
    </script>
</body>
</html>