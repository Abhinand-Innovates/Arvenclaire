<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Change Password</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <%- include("../partials/user/account-sidebar") %>
    <style>
        :root {
            --primary-black: #000000;
            --secondary-black: #1a1a1a;
            --light-gray: #f8f9fa;
            --medium-gray: #6c757d;
            --border-gray: #e1e5e9;
            --white: #ffffff;
            --hover-gray: #e9ecef;
            --success-green: #10b981;
            --error-red: #ef4444;
            --focus-blue: #3b82f6;
            --shadow-light: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
            --shadow-medium: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            --shadow-large: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
            color: var(--primary-black);
            line-height: 1.6;
        }

        .main-content {
            margin-left: 250px;
            padding: 32px;
            min-height: 100vh;
            background: transparent;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: flex-start;
        }

        .breadcrumb-container {
            margin-bottom: 32px;
            width: 100%;
            max-width: 800px;
            align-self: flex-start;
        }

        .breadcrumb {
            background: transparent;
            padding: 0;
            margin: 0;
            font-size: 0.875rem;
            font-weight: 500;
        }

        .breadcrumb-item {
            color: var(--medium-gray);
        }

        .breadcrumb-item a {
            color: var(--primary-black);
            text-decoration: none;
            transition: all 0.2s ease;
            padding: 4px 8px;
            border-radius: 6px;
        }

        .breadcrumb-item a:hover {
            color: var(--primary-black);
            background-color: var(--hover-gray);
        }

        .breadcrumb-item.active {
            color: var(--secondary-black);
            font-weight: 600;
        }

        .form-container {
            background: var(--white);
            border-radius: 20px;
            padding: 48px;
            box-shadow: var(--shadow-large);
            width: 100%;
            max-width: 800px;
            border: 1px solid rgba(0, 0, 0, 0.05);
            backdrop-filter: blur(10px);
            position: relative;
            overflow: hidden;
        }

        .form-container::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, var(--primary-black) 0%, var(--secondary-black) 100%);
        }

        .form-title {
            color: var(--primary-black);
            font-size: 28px;
            font-weight: 700;
            margin-bottom: 8px;
            display: flex;
            align-items: center;
            gap: 12px;
            letter-spacing: -0.025em;
        }

        .form-title i {
            font-size: 24px;
            color: var(--primary-black);
        }

        .form-subtitle {
            color: var(--medium-gray);
            font-size: 16px;
            margin-bottom: 32px;
            font-weight: 400;
        }

        .email-display {
            background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
            padding: 20px;
            border-radius: 12px;
            margin-bottom: 32px;
            display: flex;
            align-items: center;
            gap: 12px;
            color: var(--primary-black);
            font-size: 15px;
            font-weight: 500;
            border: 1px solid var(--border-gray);
        }

        .email-display i {
            color: var(--medium-gray);
            font-size: 16px;
        }

        .form-group {
            margin-bottom: 28px;
        }

        .form-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 32px;
            margin-bottom: 32px;
        }

        .form-section {
            display: flex;
            flex-direction: column;
        }

        .form-section-title {
            font-size: 18px;
            font-weight: 600;
            color: var(--primary-black);
            margin-bottom: 20px;
            padding-bottom: 12px;
            border-bottom: 2px solid var(--border-gray);
        }

        .form-label {
            color: var(--primary-black);
            font-weight: 600;
            margin-bottom: 10px;
            display: block;
            font-size: 15px;
            letter-spacing: -0.01em;
        }

        .form-control {
            border: 2px solid var(--border-gray);
            border-radius: 12px;
            padding: 16px 20px;
            font-size: 15px;
            transition: all 0.2s ease;
            background-color: #fafbfc;
            width: 100%;
            font-weight: 500;
            color: var(--primary-black);
        }

        .form-control:focus {
            border-color: var(--primary-black);
            box-shadow: 0 0 0 3px rgba(0, 0, 0, 0.1);
            background-color: var(--white);
            outline: none;
            transform: translateY(-1px);
        }

        .form-control:hover:not(:focus) {
            border-color: var(--secondary-black);
            background-color: var(--white);
        }

        .password-input-group {
            position: relative;
        }

        .password-toggle {
            position: absolute;
            right: 16px;
            top: 50%;
            transform: translateY(-50%);
            background: none;
            border: none;
            color: var(--medium-gray);
            cursor: pointer;
            padding: 8px;
            font-size: 16px;
            border-radius: 6px;
            transition: all 0.2s ease;
        }

        .password-toggle:hover {
            color: var(--primary-black);
            background-color: var(--hover-gray);
        }

        .requirements-section {
            background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
            border-radius: 16px;
            padding: 24px;
            margin: 32px 0;
            border: 1px solid var(--border-gray);
            position: relative;
        }

        .requirements-title {
            color: var(--primary-black);
            font-weight: 600;
            margin-bottom: 16px;
            font-size: 16px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .requirements-title::before {
            content: 'ðŸ”’';
            font-size: 18px;
        }

        .requirement-item {
            display: flex;
            align-items: center;
            gap: 12px;
            margin-bottom: 10px;
            color: var(--secondary-black);
            font-size: 14px;
            font-weight: 500;
            padding: 8px 0;
        }

        .requirement-dot {
            width: 6px;
            height: 6px;
            background: linear-gradient(135deg, var(--primary-black) 0%, var(--secondary-black) 100%);
            border-radius: 50%;
            flex-shrink: 0;
        }

        .update-btn {
            background: linear-gradient(135deg, var(--primary-black) 0%, var(--secondary-black) 100%);
            border: none;
            border-radius: 12px;
            padding: 16px 32px;
            color: var(--white);
            font-weight: 600;
            font-size: 15px;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
            margin: 40px auto 0;
            min-width: 200px;
            box-shadow: var(--shadow-medium);
            letter-spacing: -0.01em;
        }

        .update-btn:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: var(--shadow-large);
            background: linear-gradient(135deg, var(--secondary-black) 0%, #333333 100%);
        }

        .update-btn:active {
            transform: translateY(0);
        }

        .update-btn:disabled {
            opacity: 0.7;
            cursor: not-allowed;
            transform: none;
        }

        .error-message {
            color: var(--error-red);
            font-size: 0.875rem;
            margin-top: 8px;
            display: none;
            font-weight: 500;
            padding: 10px 14px;
            background-color: rgba(239, 68, 68, 0.1);
            border-radius: 8px;
            border-left: 4px solid var(--error-red);
            animation: slideDown 0.3s ease-out;
        }

        .error-message.show {
            display: block;
        }

        .form-control.error {
            border-color: var(--error-red);
            background-color: rgba(239, 68, 68, 0.05);
        }

        .form-control.error:focus {
            border-color: var(--error-red);
            box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.2);
        }

        @keyframes slideDown {
            from {
                opacity: 0;
                transform: translateY(-10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Loading state */
        .loading {
            opacity: 0.7;
            pointer-events: none;
        }

        /* Responsive design */
        @media (max-width: 1024px) {
            .main-content {
                margin-left: 0;
                padding: 24px;
            }

            .form-grid {
                grid-template-columns: 1fr;
                gap: 24px;
            }
        }

        @media (max-width: 768px) {
            .main-content {
                padding: 20px;
            }

            .form-container {
                padding: 32px 24px;
                border-radius: 16px;
            }

            .form-title {
                font-size: 24px;
            }

            .breadcrumb-container {
                margin-bottom: 24px;
                max-width: 100%;
            }

            .form-grid {
                grid-template-columns: 1fr;
                gap: 20px;
                margin-bottom: 24px;
            }
        }

        @media (max-width: 576px) {
            .main-content {
                padding: 16px;
            }

            .form-container {
                padding: 24px 20px;
                margin: 0;
                border-radius: 12px;
            }

            .form-title {
                font-size: 22px;
                flex-direction: column;
                text-align: center;
                gap: 8px;
            }

            .email-display {
                padding: 16px;
                font-size: 14px;
            }

            .form-control {
                padding: 14px 16px;
                font-size: 16px; /* Prevents zoom on iOS */
            }

            .password-toggle {
                right: 12px;
            }

            .update-btn {
                padding: 14px 24px;
                font-size: 14px;
                min-width: 180px;
            }

            .requirements-section {
                padding: 20px;
                margin: 24px 0;
            }

            .requirement-item {
                font-size: 13px;
            }
        }

        @media (max-width: 480px) {
            .form-container {
                padding: 20px 16px;
            }

            .breadcrumb {
                font-size: 0.8rem;
            }
        }
    </style>
</head>
<body>
    <!-- Main Content -->
    <div class="main-content">
        <!-- Breadcrumb -->
        <div class="breadcrumb-container">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/profile">My Account</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Change Password</li>
                </ol>
            </nav>
        </div>

        <!-- Form Container -->
        <div class="form-container">
            <!-- Form Title -->
            <h1 class="form-title">
                <i class="fas fa-lock"></i>
                Change Password
            </h1>
            <p class="form-subtitle">Update your password to keep your account secure</p>

            <!-- Email Display -->
            <div class="email-display">
                <i class="fas fa-envelope"></i>
                <%= user.email %>
            </div>

                <!-- Password Form -->
                <form id="changePasswordForm">
                    <div class="form-grid">
                        <!-- Left Column - Password Fields -->
                        <div class="form-section">
                            <h3 class="form-section-title">Password Information</h3>

                            <!-- Current Password -->
                            <div class="form-group">
                                <label class="form-label">Current Password</label>
                                <div class="password-input-group">
                                    <input type="password" class="form-control" id="currentPassword" name="currentPassword" placeholder="Enter your current password">
                                    <button type="button" class="password-toggle" onclick="togglePassword('currentPassword')">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                </div>
                                <div class="error-message" id="currentPasswordError"></div>
                            </div>

                            <!-- New Password -->
                            <div class="form-group">
                                <label class="form-label">New Password</label>
                                <div class="password-input-group">
                                    <input type="password" class="form-control" id="newPassword" name="newPassword" placeholder="Enter your new password">
                                    <button type="button" class="password-toggle" onclick="togglePassword('newPassword')">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                </div>
                                <div class="error-message" id="newPasswordError"></div>
                            </div>

                            <!-- Confirm New Password -->
                            <div class="form-group">
                                <label class="form-label">Confirm New Password</label>
                                <div class="password-input-group">
                                    <input type="password" class="form-control" id="confirmPassword" name="confirmPassword" placeholder="Confirm your new password">
                                    <button type="button" class="password-toggle" onclick="togglePassword('confirmPassword')">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                </div>
                                <div class="error-message" id="confirmPasswordError"></div>
                            </div>
                        </div>

                        <!-- Right Column - Requirements -->
                        <div class="form-section">
                            <h3 class="form-section-title">Security Requirements</h3>

                            <!-- Password Requirements -->
                            <div class="requirements-section">
                                <div class="requirements-title">Password Requirements:</div>
                                <div class="requirement-item">
                                    <div class="requirement-dot"></div>
                                    At least 8 characters
                                </div>
                                <div class="requirement-item">
                                    <div class="requirement-dot"></div>
                                    At least one uppercase letter
                                </div>
                                <div class="requirement-item">
                                    <div class="requirement-dot"></div>
                                    At least one lowercase letter
                                </div>
                                <div class="requirement-item">
                                    <div class="requirement-dot"></div>
                                    At least one number
                                </div>
                                <div class="requirement-item">
                                    <div class="requirement-dot"></div>
                                    At least one special character
                                </div>
                                <div class="requirement-item">
                                    <div class="requirement-dot"></div>
                                    No spaces
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Update Button -->
                    <button type="submit" class="update-btn" id="updateBtn">
                        <i class="fas fa-key"></i>
                        Update Password
                    </button>
                </form>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.js"></script>
    <script>
        // Toggle password visibility
        function togglePassword(inputId) {
            const input = document.getElementById(inputId);
            const icon = input.nextElementSibling.querySelector('i');

            if (input.type === 'password') {
                input.type = 'text';
                icon.classList.replace('fa-eye', 'fa-eye-slash');
            } else {
                input.type = 'password';
                icon.classList.replace('fa-eye-slash', 'fa-eye');
            }
        }

        // Clear error messages
        function clearErrors() {
            document.querySelectorAll('.error-message').forEach(error => {
                error.style.display = 'none';
                error.textContent = '';
                error.classList.remove('show');
            });
            // Remove error styling from inputs
            document.querySelectorAll('.form-control').forEach(input => {
                input.classList.remove('error');
            });
        }

        // Show error message
        function showError(fieldId, message) {
            const errorElement = document.getElementById(fieldId + 'Error');
            const inputElement = document.getElementById(fieldId);

            if (errorElement && inputElement) {
                errorElement.textContent = message;
                errorElement.style.display = 'block';
                errorElement.classList.add('show');
                inputElement.classList.add('error');

                // Focus on the field with error
                inputElement.focus();
            }
        }

        // Clear error for specific field
        function clearFieldError(fieldId) {
            const errorElement = document.getElementById(fieldId + 'Error');
            const inputElement = document.getElementById(fieldId);

            if (errorElement && inputElement) {
                errorElement.style.display = 'none';
                errorElement.textContent = '';
                errorElement.classList.remove('show');
                inputElement.classList.remove('error');
            }
        }

        // Validate individual fields
        function validateField(fieldId, value) {
            let isValid = true;

            // Clear error for this specific field first
            clearFieldError(fieldId);

            switch(fieldId) {
                case 'currentPassword':
                    if (!value.trim()) {
                        showError('currentPassword', 'Current password is required');
                        isValid = false;
                    }
                    break;

                case 'newPassword':
                    if (!value.trim()) {
                        showError('newPassword', 'New password is required');
                        isValid = false;
                    } else {
                        // Password requirements validation
                        const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/;
                        if (!passwordRegex.test(value)) {
                            showError('newPassword', 'Password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, one number, and one special character');
                            isValid = false;
                        } else if (value.includes(' ')) {
                            showError('newPassword', 'Password cannot contain spaces');
                            isValid = false;
                        }
                    }
                    break;

                case 'confirmPassword':
                    const newPasswordValue = document.getElementById('newPassword').value;
                    if (!value.trim()) {
                        showError('confirmPassword', 'Please confirm your new password');
                        isValid = false;
                    } else if (value !== newPasswordValue) {
                        showError('confirmPassword', 'New passwords do not match');
                        isValid = false;
                    }
                    break;
            }
            return isValid;
        }

        // Add real-time validation
        document.getElementById('currentPassword').addEventListener('blur', function() {
            if (this.value.trim()) {
                validateField('currentPassword', this.value);
            }
        });

        document.getElementById('currentPassword').addEventListener('input', function() {
            if (this.classList.contains('error') && this.value.trim()) {
                clearFieldError('currentPassword');
            }
        });

        document.getElementById('newPassword').addEventListener('blur', function() {
            if (this.value.trim()) {
                validateField('newPassword', this.value);
                // Also revalidate confirm password if it has a value
                const confirmPassword = document.getElementById('confirmPassword').value;
                if (confirmPassword) {
                    validateField('confirmPassword', confirmPassword);
                }
            }
        });

        document.getElementById('newPassword').addEventListener('input', function() {
            if (this.classList.contains('error') && this.value.trim()) {
                clearFieldError('newPassword');
            }
            // Also clear confirm password error if passwords now match
            const confirmPassword = document.getElementById('confirmPassword');
            if (confirmPassword.classList.contains('error') && confirmPassword.value === this.value) {
                clearFieldError('confirmPassword');
            }
        });

        document.getElementById('confirmPassword').addEventListener('blur', function() {
            if (this.value.trim()) {
                validateField('confirmPassword', this.value);
            }
        });

        document.getElementById('confirmPassword').addEventListener('input', function() {
            if (this.classList.contains('error') && this.value.trim()) {
                const newPassword = document.getElementById('newPassword').value;
                if (this.value === newPassword) {
                    clearFieldError('confirmPassword');
                }
            }
        });

        // Form submission
        document.getElementById('changePasswordForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            clearErrors();

            const currentPassword = document.getElementById('currentPassword').value;
            const newPassword = document.getElementById('newPassword').value;
            const confirmPassword = document.getElementById('confirmPassword').value;
            const updateBtn = document.getElementById('updateBtn');

            // Validate all fields
            let isFormValid = true;

            if (!validateField('currentPassword', currentPassword)) {
                isFormValid = false;
            }

            if (!validateField('newPassword', newPassword)) {
                isFormValid = false;
            }

            if (!validateField('confirmPassword', confirmPassword)) {
                isFormValid = false;
            }

            // If validation fails, don't submit
            if (!isFormValid) {
                return;
            }

            // Disable button and show loading
            updateBtn.disabled = true;
            updateBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Updating...';

            try {
                const response = await fetch('/change-password', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        currentPassword,
                        newPassword,
                        confirmPassword
                    })
                });

                const data = await response.json();

                if (data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: 'Password updated successfully',
                        confirmButtonColor: '#000000'
                    }).then(() => {
                        // Clear form
                        document.getElementById('changePasswordForm').reset();
                        clearErrors();
                    });
                } else {
                    // Handle specific server-side errors
                    if (data.message.includes('Current password is incorrect')) {
                        showError('currentPassword', 'Current password is incorrect');
                    } else if (data.message.includes('Password must be')) {
                        showError('newPassword', data.message);
                    } else if (data.message.includes('passwords do not match')) {
                        showError('confirmPassword', 'New passwords do not match');
                    } else {
                        // Generic error - show on current password field as fallback
                        showError('currentPassword', data.message || 'Failed to update password');
                    }
                }
            } catch (error) {
                console.error('Error:', error);
                showError('currentPassword', 'An error occurred while updating password. Please try again.');
            } finally {
                // Re-enable button
                updateBtn.disabled = false;
                updateBtn.innerHTML = '<i class="fas fa-key"></i> Update Password';
            }
        });
    </script>
</body>
</html>