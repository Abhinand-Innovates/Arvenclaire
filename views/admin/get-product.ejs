
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <!-- SweetAlert2 -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.19/dist/sweetalert2.min.css">
    
    <link rel="stylesheet" href="../../styles/admin/get-product.css">

    <%- include("../partials/admin/sidebar")Â %>


    <!-- Main Content -->
    <div class="main-content">
        <div class="container-fluid py-4">
            <!-- Breadcrumbs -->
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="#">Dashboard</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Products</li>
                </ol>
            </nav>

            <!-- Header Section -->
            <div class="row mb-4">
                <div class="col-12">
                    <div class="d-flex justify-content-between align-items-center flex-wrap">
                        <h2 class="mb-0">Product Management</h2>
                        <button class="btn btn-dark" id="addProductBtn">
                            <a href="" style="text-decoration: none; color: white;font-size: larger;">Add new product</a>
                        </button>
                    </div>
                </div>
            </div>

            <!-- Filters Section -->
            <div class="row mb-4">
                <div class="col-lg-3 col-md-4 col-sm-6 mb-3">
                    <label class="form-label">Category</label>
                    <select class="form-select" id="categoryFilter">
                        <option value="">All Categories</option>
                        <option value="luxury">Men</option>
                        <option value="smart">Women</option>
                        <option value="sports">Unisex</option>
                        <option value="classic">Kids</option>
                    </select>
                </div>
                <div class="col-lg-3 col-md-4 col-sm-6 mb-3">
                    <label class="form-label">Sort by Price</label>
                    <select class="form-select" id="priceSort">
                        <option value="">Default</option>
                        <option value="low-high">Price: Low to High</option>
                        <option value="high-low">Price: High to Low</option>
                    </select>
                </div>
                <div class="col-lg-4 col-md-4 col-sm-8 mb-3 search-container">
                    <label class="form-label">Search Watches</label>
                    <div class="input-group">
                        <input type="text" class="form-control" id="searchInput" placeholder="Search by watch name...">
                        <button class="btn btn-outline-secondary" type="button" id="searchBtn">
                            <i class="fas fa-search"></i>
                        </button>
                    </div>
                </div>
            </div>

            <!-- Watches Table -->
            <div class="row">
                <div class="col-12">
                    <div class="card">
                        <div class="card-body p-0">
                            <div class="table-responsive">
                                <table class="table table-hover mb-0" id="watchTable">
                                    <thead>
                                        <tr>
                                            <th>Image</th>
                                            <th>Watch Name</th>
                                            <th>Category</th>
                                            <th>Price</th>
                                            <th>Stock</th>
                                            <th>Status</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody id="watchTableBody">
                                        <!-- Table rows will be dynamically populated -->
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Pagination -->
            <div class="row mt-4">
                <div class="col-12">
                    <div class="pagination-container">
                        <div class="mb-2 mb-md-0" id="paginationInfo">
                            <span class="text-muted">Showing 1 to 4 of 12 watches</span>
                        </div>
                        <nav aria-label="Watch pagination">
                            <ul class="pagination mb-0" id="pagination">
                                <!-- Pagination links will be dynamically generated -->
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <!-- SweetAlert2 -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.19/dist/sweetalert2.all.min.js"></script>
    
    <script>
        // Watch data
        const watches = [
            {
                id: 1,
                image: "https://images.unsplash.com/photo-1523275335684-37898b6baf30?ixlib=rb-4.0.3&auto=format&fit=crop&w=100&q=80",
                name: "Luxury Chronograph",
                category: "Luxury Watches",
                price: 999.99,
                stock: 15,
                status: true
            },
            {
                id: 2,
                image: "https://images.unsplash.com/photo-1542496658-e33a7ee677ca?ixlib=rb-4.0.3&auto=format&fit=crop&w=100&q=80",
                name: "Smart Fitness Tracker",
                category: "Smart Watches",
                price: 199.99,
                stock: 30,
                status: true
            },
            {
                id: 3,
                image: "https://images.unsplash.com/photo-1546868871-7041f2a55e12?ixlib=rb-4.0.3&auto=format&fit=crop&w=100&q=80",
                name: "Dive Master Pro",
                category: "Sports Watches",
                price: 299.99,
                stock: 25,
                status: false
            },
            {
                id: 4,
                image: "https://images.unsplash.com/photo-1524592094714-0f0654e20314?ixlib=rb-4.0.3&auto=format&fit=crop&w=100&q=80",
                name: "Heritage Classic",
                category: "Classic Watches",
                price: 499.99,
                stock: 20,
                status: true
            },
            {
                id: 5,
                image: "https://images.unsplash.com/photo-1522312346375-c1e53d64d9df?ixlib=rb-4.0.3&auto=format&fit=crop&w=100&q=80",
                name: "Pilot's Chrono",
                category: "Luxury Watches",
                price: 799.99,
                stock: 12,
                status: true
            },
            {
                id: 6,
                image: "https://images.unsplash.com/photo-1594576722512-582bcd46fba1?ixlib=rb-4.0.3&auto=format&fit=crop&w=100&q=80",
                name: "Smart Health Watch",
                category: "Smart Watches",
                price: 249.99,
                stock: 40,
                status: false
            },
            {
                id: 7,
                image: "https://images.unsplash.com/photo-1523175813961-9c4454b86d25?ixlib=rb-4.0.3&auto=format&fit=crop&w=100&q=80",
                name: "Runner's Pro",
                category: "Sports Watches",
                price: 149.99,
                stock: 35,
                status: true
            },
            {
                id: 8,
                image: "https://images.unsplash.com/photo-1548169874-53e85f496f7e?ixlib=rb-4.0.3&auto=format&fit=crop&w=100&q=80",
                name: "Vintage Dress Watch",
                category: "Classic Watches",
                price: 399.99,
                stock: 18,
                status: true
            },
            {
                id: 9,
                image: "https://images.unsplash.com/photo-1522312346375-c1e53d64d9df?ixlib=rb-4.0.3&auto=format&fit=crop&w=100&q=80",
                name: "Luxury Diver",
                category: "Luxury Watches",
                price: 1299.99,
                stock: 10,
                status: false
            },
            {
                id: 10,
                image: "https://images.unsplash.com/photo-1594576722512-582bcd46fba1?ixlib=rb-4.0.3&auto=format&fit=crop&w=100&q=80",
                name: "Smart Pro",
                category: "Smart Watches",
                price: 299.99,
                stock: 28,
                status: true
            },
            {
                id: 11,
                image: "https://images.unsplash.com/photo-1546868871-7041f2a55e12?ixlib=rb-4.0.3&auto=format&fit=crop&w=100&q=80",
                name: "Sports Chrono",
                category: "Sports Watches",
                price: 199.99,
                stock: 22,
                status: true
            },
            {
                id: 12,
                image: "https://images.unsplash.com/photo-1524592094714-0f0654e20314?ixlib=rb-4.0.3&auto=format&fit=crop&w=100&q=80",
                name: "Classic Automatic",
                category: "Classic Watches",
                price: 599.99,
                stock: 15,
                status: true
            }
        ];

        document.addEventListener('DOMContentLoaded', function() {
            const itemsPerPage = 10;
            let currentPage = 1;
            const totalItems = watches.length;
            const totalPages = Math.ceil(totalItems / itemsPerPage);

            // Function to render table rows
            function renderTable(page) {
                const start = (page - 1) * itemsPerPage;
                const end = start + itemsPerPage;
                const paginatedWatches = watches.slice(start, end);

                const tbody = document.getElementById('watchTableBody');
                tbody.innerHTML = '';

                paginatedWatches.forEach(watch => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>
                            <img src="${watch.image}" alt="${watch.name}" class="product-image">
                        </td>
                        <td>${watch.name}</td>
                        <td>${watch.category}</td>
                        <td>$${watch.price.toFixed(2)}</td>
                        <td>${watch.stock}</td>
                        <td>
                            <label class="toggle-switch">
                                <input type="checkbox" ${watch.status ? 'checked' : ''} class="toggle-status" data-product-id="${watch.id}">
                                <span class="toggle-slider"></span>
                            </label>
                        </td>
                        <td>
                            <button class="btn-action btn-edit" data-id="${watch.id}">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn-action btn-delete" data-id="${watch.id}">
                                <i class="fas fa-trash"></i>
                            </button>
                        </td>
                    `;
                    tbody.appendChild(row);
                });

                // Update pagination info
                const showingStart = start + 1;
                const showingEnd = Math.min(end, totalItems);
                document.getElementById('paginationInfo').innerHTML = `
                    <span class="text-muted">Showing ${showingStart} to ${showingEnd} of ${totalItems} watches</span>
                `;
            }

            // Function to render pagination
            function renderPagination() {
                const pagination = document.getElementById('pagination');
                pagination.innerHTML = '';

                // Previous button
                const prevItem = document.createElement('li');
                prevItem.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
                prevItem.innerHTML = `<a class="page-link" href="#" data-page="prev"><i class="fas fa-chevron-left"></i></a>`;
                pagination.appendChild(prevItem);

                // Page numbers
                const maxVisiblePages = 5;
                let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
                let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);

                if (endPage - startPage + 1 < maxVisiblePages) {
                    startPage = Math.max(1, endPage - maxVisiblePages + 1);
                }

                if (startPage > 1) {
                    const firstPage = document.createElement('li');
                    firstPage.className = 'page-item';
                    firstPage.innerHTML = `<a class="page-link" href="#" data-page="1">1</a>`;
                    pagination.appendChild(firstPage);

                    if (startPage > 2) {
                        const ellipsis = document.createElement('li');
                        ellipsis.className = 'page-item disabled';
                        ellipsis.innerHTML = `<span class="page-link">...</span>`;
                        pagination.appendChild(ellipsis);
                    }
                }

                for (let i = startPage; i <= endPage; i++) {
                    const pageItem = document.createElement('li');
                    pageItem.className = `page-item ${i === currentPage ? 'active' : ''}`;
                    pageItem.innerHTML = `<a class="page-link" href="#" data-page="${i}">${i}</a>`;
                    pagination.appendChild(pageItem);
                }

                if (endPage < totalPages) {
                    if (endPage < totalPages - 1) {
                        const ellipsis = document.createElement('li');
                        ellipsis.className = 'page-item disabled';
                        ellipsis.innerHTML = `<span class="page-link">...</span>`;
                        pagination.appendChild(ellipsis);
                    }

                    const lastPage = document.createElement('li');
                    lastPage.className = 'page-item';
                    lastPage.innerHTML = `<a class="page-link" href="#" data-page="${totalPages}">${totalPages}</a>`;
                    pagination.appendChild(lastPage);
                }

                // Next button
                const nextItem = document.createElement('li');
                nextItem.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
                nextItem.innerHTML = `<a class="page-link" href="#" data-page="next"><i class="fas fa-chevron-right"></i></a>`;
                pagination.appendChild(nextItem);
            }

            // Handle pagination clicks
            function handlePaginationClick(e) {
                e.preventDefault();
                const page = e.target.closest('.page-link').getAttribute('data-page');
                if (!e.target.closest('.page-item').classList.contains('disabled') && page !== '...') {
                    if (page === 'prev') {
                        currentPage = Math.max(1, currentPage - 1);
                    } else if (page === 'next') {
                        currentPage = Math.min(totalPages, currentPage + 1);
                    } else {
                        currentPage = parseInt(page);
                    }

                    renderTable(currentPage);
                    renderPagination();

                    const pageText = page === 'prev' ? 'Previous Page' : 
                                    page === 'next' ? 'Next Page' : 
                                    `Page ${page}`;
                    
                    Swal.fire({
                        toast: true,
                        position: 'top-end',
                        showConfirmButton: false,
                        timer: 1500,
                        icon: 'info',
                        title: `Loading ${pageText}...`
                    });
                }
            }

            // Initial render
            renderTable(currentPage);
            renderPagination();

            // Add pagination event listeners
            document.getElementById('pagination').addEventListener('click', handlePaginationClick);

            // Add Watch Button
            document.getElementById('addProductBtn').addEventListener('click', function() {
                Swal.fire({
                    title: 'Add Product',
                    text: 'Redirecting to add watch form...',
                    icon: 'info',
                    confirmButtonText: 'Continue',
                    confirmButtonColor: '#000000'
                });
            });

            // Category Filter
            document.getElementById('categoryFilter').addEventListener('change', function() {
                const category = this.value;
                Swal.fire({
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 2000,
                    icon: 'info',
                    title: category ? `Filtering by: ${category}` : 'Showing all categories'
                });
            });

            // Price Sort
            document.getElementById('priceSort').addEventListener('change', function() {
                const sortOption = this.options[this.selectedIndex].text;
                if (this.value) {
                    Swal.fire({
                        toast: true,
                        position: 'top-end',
                        showConfirmButton: false,
                        timer: 2000,
                        icon: 'info',
                        title: `Sorting by: ${sortOption}`
                    });
                }
            });

            // Search Button
            document.getElementById('searchBtn').addEventListener('click', function() {
                const searchTerm = document.getElementById('searchInput').value;
                if (searchTerm.trim()) {
                    Swal.fire({
                        toast: true,
                        position: 'top-end',
                        showConfirmButton: false,
                        timer: 2500,
                        icon: 'info',
                        title: `Searching for: "${searchTerm}"`
                    });
                } else {
                    Swal.fire({
                        toast: true,
                        position: 'top-end',
                        showConfirmButton: false,
                        timer: 2000,
                        icon: 'warning',
                        title: 'Please enter a search term'
                    });
                }
            });

            // Search on Enter key
            document.getElementById('searchInput').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    document.getElementById('searchBtn').click();
                }
            });

            // Toggle Status Switches
            document.getElementById('watchTableBody').addEventListener('change', function(e) {
                if (e.target.classList.contains('toggle-status')) {
                    const productId = e.target.getAttribute('data-product-id');
                    const isListed = e.target.checked;
                    const statusText = isListed ? 'Listed' : 'Unlisted';
                    
                    Swal.fire({
                        toast: true,
                        position: 'top-end',
                        showConfirmButton: false,
                        timer: 2500,
                        icon: 'success',
                        title: `Watch ${statusText} successfully!`
                    });
                }
            });

            // Edit Buttons
            document.getElementById('watchTableBody').addEventListener('click', function(e) {
                if (e.target.closest('.btn-edit')) {
                    const btn = e.target.closest('.btn-edit');
                    const productId = btn.getAttribute('data-id');
                    const productName = btn.closest('tr').children[1].textContent;
                    
                    Swal.fire({
                        title: 'Edit Watch',
                        text: `Edit "${productName}"?`,
                        icon: 'question',
                        showCancelButton: true,
                        confirmButtonText: 'Yes, Edit',
                        cancelButtonText: 'Cancel',
                        confirmButtonColor: '#000000',
                        cancelButtonColor: '#6c757d'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            Swal.fire({
                                toast: true,
                                position: 'top-end',
                                showConfirmButton: false,
                                timer: 2000,
                                icon: 'info',
                                title: 'Redirecting to edit form...'
                            });
                        }
                    });
                }
            });

            // Delete Buttons
            document.getElementById('watchTableBody').addEventListener('click', function(e) {
                if (e.target.closest('.btn-delete')) {
                    const btn = e.target.closest('.btn-delete');
                    const productId = btn.getAttribute('data-id');
                    const productName = btn.closest('tr').children[1].textContent;
                    const row = btn.closest('tr');
                    
                    Swal.fire({
                        title: 'Are you sure?',
                        text: `Delete "${productName}"? This action cannot be undone!`,
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Yes, Delete!',
                        cancelButtonText: 'Cancel',
                        confirmButtonColor: '#dc3545',
                        cancelButtonColor: '#6c757d'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            row.remove();
                            watches.splice(watches.findIndex(w => w.id === parseInt(productId)), 1);
                            renderTable(currentPage);
                            renderPagination();
                            Swal.fire({
                                toast: true,
                                position: 'top-end',
                                showConfirmButton: false,
                                timer: 2500,
                                icon: 'success',
                                title: 'Watch deleted successfully!'
                            });
                        }
                    });
                }
            });
        });
    </script>
</body>
</html>