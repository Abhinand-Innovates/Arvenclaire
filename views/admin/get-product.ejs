
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">

    <link rel="stylesheet" href="../../styles/admin/get-product.css">

    <%- include("../partials/admin/sidebar") %>

    <!-- Main Content -->
    <div class="main-content">
        <!-- Breadcrumb -->
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="#"><i class="fas fa-home"></i> Dashboard</a></li>
                <li class="breadcrumb-item active" aria-current="page">Products</li>
            </ol>
        </nav>

        <!-- Page Header -->
        <div class="page-header">
            <div>
                <h1 class="page-title">Product Management</h1>
            </div>
            <button class="btn-black" onclick="showAddModal()">
                <i class="fas fa-plus"></i>
                Add New Product
            </button>
        </div>

        <!-- Content Container -->
        <div class="content-container">
            <!-- Table Header -->
            <div class="table-header">
                <div class="table-header-left">
                    <select id="categoryFilter">
                        <option value="">All Categories</option>
                        <option value="Luxury Watches">Luxury Watches</option>
                        <option value="Smart Watches">Smart Watches</option>
                        <option value="Sports Watches">Sports Watches</option>
                        <option value="Classic Watches">Classic Watches</option>
                    </select>
                    <select id="sortByPrice">
                        <option value="">Sort by Price</option>
                        <option value="asc">Low to High</option>
                        <option value="desc">High to Low</option>
                    </select>
                </div>
                <div class="search-box">
                    <input type="text" class="form-control search-input" id="searchInput" placeholder="Search by watch name...">
                </div>
            </div>

            <!-- Table -->
            <div class="table-responsive">
                <table class="table mb-0">
                    <thead>
                        <tr>
                            <th>Image</th>
                            <th>Watch Name</th>
                            <th>Category</th>
                            <th>Price</th>
                            <th>Stock</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="productTableBody">
                        <!-- Populated by JavaScript -->
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            <div class="pagination-container">
                <div class="pagination-info" id="paginationInfo">
                    Showing 0 to 0 of 0 entries
                </div>
                <nav aria-label="Product pagination">
                    <ul class="pagination" id="paginationNav">
                        <!-- Populated by JavaScript -->
                    </ul>
                </nav>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/sweetalert2/11.10.5/sweetalert2.all.min.js"></script>
    <script>
        let products = [
            { id: '1', image: 'https://via.placeholder.com/50', name: 'Luxury Chronograph', category: 'Luxury Watches', price: 999.99, stock: 15, status: false },
            { id: '2', image: 'https://via.placeholder.com/50', name: 'Smart Fitness Tracker', category: 'Smart Watches', price: 199.99, stock: 30, status: false },
            { id: '3', image: 'https://via.placeholder.com/50', name: 'Dive Master Pro', category: 'Sports Watches', price: 299.99, stock: 25, status: false },
            { id: '4', image: 'https://via.placeholder.com/50', name: 'Heritage Classic', category: 'Classic Watches', price: 499.99, stock: 20, status: true },
            { id: '5', image: 'https://via.placeholder.com/50', name: 'Pilot’s Chrono', category: 'Luxury Watches', price: 799.99, stock: 12, status: false },
            { id: '6', image: 'https://via.placeholder.com/50', name: 'Smart Health Watch', category: 'Smart Watches', price: 249.99, stock: 40, status: false }
        ];
        let filteredProducts = [...products];
        let currentPage = 1;
        const itemsPerPage = 5;

        // Search, Filter, and Sort Functionality
        const searchInput = document.getElementById('searchInput');
        const categoryFilter = document.getElementById('categoryFilter');
        const sortByPrice = document.getElementById('sortByPrice');

        searchInput.addEventListener('input', applyFilters);
        categoryFilter.addEventListener('change', applyFilters);
        sortByPrice.addEventListener('change', applyFilters);

        function applyFilters() {
            let tempProducts = [...products];

            // Search Filter
            const searchTerm = searchInput.value.toLowerCase().trim();
            if (searchTerm) {
                tempProducts = tempProducts.filter(product =>
                    product.name.toLowerCase().includes(searchTerm)
                );
            }

            // Category Filter
            const category = categoryFilter.value;
            if (category) {
                tempProducts = tempProducts.filter(product =>
                    product.category === category
                );
            }

            // Sort by Price
            const sortOrder = sortByPrice.value;
            if (sortOrder) {
                tempProducts.sort((a, b) => {
                    return sortOrder === 'asc' ? a.price - b.price : b.price - a.price;
                });
            }

            filteredProducts = tempProducts;
            currentPage = 1; // Reset to first page on filter change
            renderTable();
            renderPagination();
        }

        // Render Table
        function renderTable() {
            const tbody = document.getElementById('productTableBody');
            const start = (currentPage - 1) * itemsPerPage;
            const end = start + itemsPerPage;
            const paginatedProducts = filteredProducts.slice(start, end);

            if (paginatedProducts.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="7" class="text-center">
                            <i class="fas fa-search"></i>
                            <h5>No products found</h5>
                            <p>Try adjusting your search or filters.</p>
                        </td>
                    </tr>
                `;
                return;
            }

            tbody.innerHTML = paginatedProducts.map(product => `
                <tr>
                    <td><img src="${product.image}" alt="${product.name}"></td>
                    <td>${product.name}</td>
                    <td>${product.category}</td>
                    <td>$${product.price.toFixed(2)}</td>
                    <td>${product.stock}</td>
                    <td>
                        <label class="status-toggle">
                            <input type="checkbox" ${product.status ? 'checked' : ''} onchange="toggleStatus('${product.id}', this)">
                            <span class="toggle-slider"></span>
                        </label>
                    </td>
                    <td>
                        <div class="action-buttons">
                            <button class="btn-outline-black" onclick="showEditModal('${product.id}')"><i class="fas fa-edit"></i></button>
                            <button class="btn-danger-outline" onclick="deleteProduct('${product.id}')"><i class="fas fa-trash"></i></button>
                        </div>
                    </td>
                </tr>
            `).join('');

            updatePaginationInfo();
        }

        // Render Pagination
        function renderPagination() {
            const totalPages = Math.ceil(filteredProducts.length / itemsPerPage);
            const paginationNav = document.getElementById('paginationNav');
            let paginationHTML = `
                <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                    <a class="page-link" href="#" onclick="changePage(${currentPage - 1}); return false;" aria-label="Previous">
                        <i class="fas fa-chevron-left"></i>
                    </a>
                </li>
            `;

            for (let i = 1; i <= totalPages; i++) {
                paginationHTML += `
                    <li class="page-item ${currentPage === i ? 'active' : ''}">
                        <a class="page-link" href="#" onclick="changePage(${i}); return false;">${i}</a>
                    </li>
                `;
            }

            paginationHTML += `
                <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
                    <a class="page-link" href="#" onclick="changePage(${currentPage + 1}); return false;" aria-label="Next">
                        <i class="fas fa-chevron-right"></i>
                    </a>
                </li>
            `;

            paginationNav.innerHTML = paginationHTML;
        }

        // Update Pagination Info
        function updatePaginationInfo() {
            const start = (currentPage - 1) * itemsPerPage + 1;
            const end = Math.min(currentPage * itemsPerPage, filteredProducts.length);
            const total = filteredProducts.length;
            document.getElementById('paginationInfo').textContent = `Showing ${start} to ${end} of ${total} entries`;
        }

        // Change Page
        function changePage(page) {
            const totalPages = Math.ceil(filteredProducts.length / itemsPerPage);
            if (page < 1 || page > totalPages) return;
            currentPage = page;
            renderTable();
            renderPagination();
        }

        // Toggle Status
        function toggleStatus(productId, toggleElement) {
            const newStatus = toggleElement.checked;
            const product = products.find(p => p.id === productId);
            if (product) {
                product.status = newStatus;
                filteredProducts = filteredProducts.map(p => p.id === productId ? { ...p, status: newStatus } : p);
                Swal.fire({
                    title: 'Status Updated!',
                    text: `Product "${product.name}" is now ${newStatus ? 'listed' : 'unlisted'}.`,
                    icon: 'success',
                    timer: 2000,
                    showConfirmButton: false
                });
            }
        }

        // Show Add Product Modal
        function showAddModal() {
            Swal.fire({
                title: '<i class="fas fa-plus-circle me-2"></i>Add New Product',
                html: `
                    <div class="text-start">
                        <div class="mb-3">
                            <label for="swal-name" class="form-label">Watch Name <span class="text-danger">*</span></label>
                            <input type="text" id="swal-name" class="swal2-input" placeholder="Enter watch name" style="display: block; width: 100%;">
                        </div>
                        <div class="mb-3">
                            <label for="swal-category" class="form-label">Category <span class="text-danger">*</span></label>
                            <select id="swal-category" class="swal2-input" style="display: block; width: 100%;">
                                <option value="Luxury Watches">Luxury Watches</option>
                                <option value="Smart Watches">Smart Watches</option>
                                <option value="Sports Watches">Sports Watches</option>
                                <option value="Classic Watches">Classic Watches</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="swal-price" class="form-label">Price <span class="text-danger">*</span></label>
                            <input type="number" id="swal-price" class="swal2-input" placeholder="Enter price" style="display: block; width: 100%;">
                        </div>
                        <div class="mb-3">
                            <label for="swal-stock" class="form-label">Stock <span class="text-danger">*</span></label>
                            <input type="number" id="swal-stock" class="swal2-input" placeholder="Enter stock quantity" style="display: block; width: 100%;">
                        </div>
                        <div class="mb-3">
                            <label for="swal-status" class="form-label">Status <span class="text-danger">*</span></label>
                            <select id="swal-status" class="swal2-input" style="display: block; width: 100%;">
                                <option value="true">Listed</option>
                                <option value="false" selected>Unlisted</option>
                            </select>
                        </div>
                    </div>
                `,
                showCancelButton: true,
                confirmButtonText: '<i class="fas fa-save me-2"></i>Save Product',
                cancelButtonText: '<i class="fas fa-times me-2"></i>Cancel',
                confirmButtonColor: '#000000',
                width: '500px',
                preConfirm: () => {
                    const name = document.getElementById('swal-name').value.trim();
                    const category = document.getElementById('swal-category').value;
                    const price = parseFloat(document.getElementById('swal-price').value);
                    const stock = parseInt(document.getElementById('swal-stock').value);
                    const status = document.getElementById('swal-status').value === 'true';

                    if (!name) {
                        Swal.showValidationMessage('Please enter a watch name');
                        return false;
                    }
                    if (!category) {
                        Swal.showValidationMessage('Please select a category');
                        return false;
                    }
                    if (isNaN(price) || price <= 0) {
                        Swal.showValidationMessage('Please enter a valid price');
                        return false;
                    }
                    if (isNaN(stock) || stock < 0) {
                        Swal.showValidationMessage('Please enter a valid stock quantity');
                        return false;
                    }
                    if (products.some(p => p.name.toLowerCase() === name.toLowerCase())) {
                        Swal.showValidationMessage('A product with this name already exists');
                        return false;
                    }
                    return { name, category, price, stock, status };
                }
            }).then(result => {
                if (result.isConfirmed) {
                    const newProduct = {
                        id: (products.length + 1).toString(),
                        image: 'https://via.placeholder.com/50',
                        ...result.value
                    };
                    products.push(newProduct);
                    applyFilters();
                    Swal.fire('Success!', 'Product added successfully!', 'success');
                }
            });
        }

        // Show Edit Product Modal
        function showEditModal(productId) {
            const product = products.find(p => p.id === productId);
            if (!product) return;

            Swal.fire({
                title: '<i class="fas fa-edit me-2"></i>Edit Product',
                html: `
                    <div class="text-start">
                        <div class="mb-3">
                            <label for="swal-name" class="form-label">Watch Name <span class="text-danger">*</span></label>
                            <input type="text" id="swal-name" class="swal2-input" value="${product.name}" style="display: block; width: 100%;">
                        </div>
                        <div class="mb-3">
                            <label for="swal-category" class="form-label">Category <span class="text-danger">*</span></label>
                            <select id="swal-category" class="swal2-input" style="display: block; width: 100%;">
                                <option value="Luxury Watches" ${product.category === 'Luxury Watches' ? 'selected' : ''}>Luxury Watches</option>
                                <option value="Smart Watches" ${product.category === 'Smart Watches' ? 'selected' : ''}>Smart Watches</option>
                                <option value="Sports Watches" ${product.category === 'Sports Watches' ? 'selected' : ''}>Sports Watches</option>
                                <option value="Classic Watches" ${product.category === 'Classic Watches' ? 'selected' : ''}>Classic Watches</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="swal-price" class="form-label">Price <span class="text-danger">*</span></label>
                            <input type="number" id="swal-price" class="swal2-input" value="${product.price}" style="display: block; width: 100%;">
                        </div>
                        <div class="mb-3">
                            <label for="swal-stock" class="form-label">Stock <span class="text-danger">*</span></label>
                            <input type="number" id="swal-stock" class="swal2-input" value="${product.stock}" style="display: block; width: 100%;">
                        </div>
                        <div class="mb-3">
                            <label for="swal-status" class="form-label">Status <span class="text-danger">*</span></label>
                            <select id="swal-status" class="swal2-input" style="display: block; width: 100%;">
                                <option value="true" ${product.status ? 'selected' : ''}>Listed</option>
                                <option value="false" ${!product.status ? 'selected' : ''}>Unlisted</option>
                            </select>
                        </div>
                    </div>
                `,
                showCancelButton: true,
                confirmButtonText: '<i class="fas fa-save me-2"></i>Update Product',
                cancelButtonText: '<i class="fas fa-times me-2"></i>Cancel',
                confirmButtonColor: '#000000',
                width: '500px',
                preConfirm: () => {
                    const name = document.getElementById('swal-name').value.trim();
                    const category = document.getElementById('swal-category').value;
                    const price = parseFloat(document.getElementById('swal-price').value);
                    const stock = parseInt(document.getElementById('swal-stock').value);
                    const status = document.getElementById('swal-status').value === 'true';

                    if (!name) {
                        Swal.showValidationMessage('Please enter a watch name');
                        return false;
                    }
                    if (!category) {
                        Swal.showValidationMessage('Please select a category');
                        return false;
                    }
                    if (isNaN(price) || price <= 0) {
                        Swal.showValidationMessage('Please enter a valid price');
                        return false;
                    }
                    if (isNaN(stock) || stock < 0) {
                        Swal.showValidationMessage('Please enter a valid stock quantity');
                        return false;
                    }
                    if (products.some(p => p.id !== productId && p.name.toLowerCase() === name.toLowerCase())) {
                        Swal.showValidationMessage('A product with this name already exists');
                        return false;
                    }
                    return { name, category, price, stock, status };
                }
            }).then(result => {
                if (result.isConfirmed) {
                    const index = products.findIndex(p => p.id === productId);
                    products[index] = { ...products[index], ...result.value };
                    applyFilters();
                    Swal.fire('Success!', 'Product updated successfully!', 'success');
                }
            });
        }

        // Delete Product
        function deleteProduct(productId) {
            const product = products.find(p => p.id === productId);
            if (!product) return;

            Swal.fire({
                title: 'Are you sure?',
                text: `You are about to delete the product "${product.name}". This action cannot be undone!`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#ef4444',
                cancelButtonColor: '#6b7280',
                confirmButtonText: '<i class="fas fa-trash me-2"></i>Yes, delete it!',
                cancelButtonText: '<i class="fas fa-times me-2"></i>Cancel'
            }).then(result => {
                if (result.isConfirmed) {
                    products = products.filter(p => p.id !== productId);
                    applyFilters();
                    Swal.fire('Deleted!', `Product "${product.name}" has been deleted.`, 'success');
                }
            });
        }

        // Initialize on Page Load
        document.addEventListener('DOMContentLoaded', function() {
            applyFilters();
        });
    </script>
</body>
</html>