<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="../../styles/admin/get-product.css">

    <%- include("../partials/admin/sidebar") %>
</head>

<body>
    <!-- Main Content -->
    <div class="main-content">
        <!-- Breadcrumb -->
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="#"><i class="fas fa-home"></i> Dashboard</a></li>
                <li class="breadcrumb-item active" aria-current="page">Products</li>
            </ol>
        </nav>

        <!-- Page Header -->
        <div class="page-header">
            <div>
                <h1 class="page-title">Product Management</h1>
            </div>
            <a href="/admin/add-product" class="btn-black" style="text-decoration: none;">
                <i class="fas fa-plus"></i>
                Add New Product
            </a>

        </div>

        <!-- Content Container -->
        <div class="content-container">
            <!-- Table Header -->
            <div class="table-header">
                <div class="table-header-left">
                    <select id="categoryFilter">
                        <option value="">All Categories</option>
                        <option value="Luxury Watches">Luxury Watches</option>
                        <option value="Smart Watches">Smart Watches</option>
                        <option value="Sports Watches">Sports Watches</option>
                        <option value="Classic Watches">Classic Watches</option>
                    </select>
                    <select id="sortByPrice">
                        <option value="">Sort by Price</option>
                        <option value="asc">Low to High</option>
                        <option value="desc">High to Low</option>
                    </select>
                </div>
                <div class="search-box">
                    <input type="text" class="form-control search-input" id="searchInput"
                        placeholder="Search by watch name...">
                </div>
            </div>

            <!-- Table -->
            <div class="table-responsive">
                <table class="table mb-0">
                    <thead>
                        <tr>
                            <th>Image</th>
                            <th>Watch Name</th>
                            <th>Brand</th>
                            <th>Category</th>
                            <th>Regular Price</th>
                            <th>Selling Price</th>
                            <th>Stock</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="productTableBody">
                        <!-- Populated by JavaScript -->
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            <div class="pagination-container">
                <div class="pagination-info" id="paginationInfo">
                    Showing 0 to 0 of 0 entries
                </div>
                <nav aria-label="Product pagination">
                    <ul class="pagination" id="paginationNav">
                        <!-- Populated by JavaScript -->
                    </ul>
                </nav>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/sweetalert2/11.10.5/sweetalert2.all.min.js"></script>
    <script>
        let products = [];
        let filteredProducts = [...products];
        let categories = [];
        let currentPage = 1;
        const itemsPerPage = 5;

        // Fetch categories from backend
        async function fetchCategories() {
            try {
                const response = await fetch('/get-categories');
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
                }
                categories = await response.json();
                populateCategoryFilter();
            } catch (error) {
                console.error('Error fetching categories:', error);
                Swal.fire('Error!', `Could not fetch categories: ${error.message}`, 'error');
            }
        }

        // Populate category filter dropdown
        function populateCategoryFilter() {
            const categoryFilter = document.getElementById('categoryFilter');
            categoryFilter.innerHTML = '<option value="">All Categories</option>';
            categories.forEach(category => {
                categoryFilter.innerHTML += `<option value="${category.name}">${category.name}</option>`;
            });
        }

        // Search, Filter, and Sort Functionality
        const searchInput = document.getElementById('searchInput');
        const categoryFilter = document.getElementById('categoryFilter');
        const sortByPrice = document.getElementById('sortByPrice');

        searchInput.addEventListener('input', applyFilters);
        categoryFilter.addEventListener('change', applyFilters);
        sortByPrice.addEventListener('change', applyFilters);

        function applyFilters() {
            let tempProducts = [...products];

            // Search Filter
            const searchTerm = searchInput.value.toLowerCase().trim();
            if (searchTerm) {
                tempProducts = tempProducts.filter(product =>
                    product.name.toLowerCase().includes(searchTerm) ||
                    product.brand.toLowerCase().includes(searchTerm)
                );
            }

            // Category Filter
            const category = categoryFilter.value;
            if (category) {
                tempProducts = tempProducts.filter(product =>
                    product.category === category
                );
            }

            // Sort by Price
            const sortOrder = sortByPrice.value;
            if (sortOrder) {
                tempProducts.sort((a, b) => {
                    return sortOrder === 'asc' ? a.sellingPrice - b.sellingPrice : b.sellingPrice - a.sellingPrice;
                });
            }

            filteredProducts = tempProducts;
            currentPage = 1;
            renderTable();
            renderPagination();
        }

        // Render Table
        function renderTable() {
            const tbody = document.getElementById('productTableBody');
            const start = (currentPage - 1) * itemsPerPage;
            const end = start + itemsPerPage;
            const paginatedProducts = filteredProducts.slice(start, end);

            if (paginatedProducts.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="9" class="text-center">
                            <i class="fas fa-search"></i>
                            <h5>No products found</h5>
                            <p>Try adjusting your search or filters.</p>
                        </td>
                    </tr>
                `;
                return;
            }

            tbody.innerHTML = paginatedProducts.map(product => `
                <tr>
                    <td><img src="${product.mainImage}" alt="${product.name}"></td>
                    <td>${product.name}</td>
                    <td>${product.brand}</td>
                    <td>${product.category}</td>
                    <td>$${product.regularPrice.toFixed(2)}</td>
                    <td>$${product.sellingPrice.toFixed(2)}</td>
                    <td>${product.stock}</td>
                    <td>
                        <label class="status-toggle">
                            <input type="checkbox" ${product.status ? 'checked' : ''} onchange="toggleStatus('${product.id}', this)">
                            <span class="toggle-slider"></span>
                        </label>
                    </td>
                    <td>
                        <div class="action-buttons">
                            <a href="/admin/edit-product/${product.id}" class="btn-outline-black"><i class="fas fa-edit"></i></a>
                            <button class="btn-danger-outline" onclick="deleteProduct('${product.id}')"><i class="fas fa-trash"></i></button>
                        </div>
                    </td>
                </tr>
            `).join('');

            updatePaginationInfo();
        }

        // Render Pagination
        function renderPagination() {
            const totalPages = Math.ceil(filteredProducts.length / itemsPerPage);
            const paginationNav = document.getElementById('paginationNav');
            let paginationHTML = `
                <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                    <a class="page-link" href="#" onclick="changePage(${currentPage - 1}); return false;" aria-label="Previous">
                        <i class="fas fa-chevron-left"></i>
                    </a>
                </li>
            `;

            for (let i = 1; i <= totalPages; i++) {
                paginationHTML += `
                    <li class="page-item ${currentPage === i ? 'active' : ''}">
                        <a class="page-link" href="#" onclick="changePage(${i}); return false;">${i}</a>
                    </li>
                `;
            }

            paginationHTML += `
                <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
                    <a class="page-link" href="#" onclick="changePage(${currentPage + 1}); return false;" aria-label="Next">
                        <i class="fas fa-chevron-right"></i>
                    </a>
                </li>
            `;

            paginationNav.innerHTML = paginationHTML;
        }

        // Update Pagination Info
        function updatePaginationInfo() {
            const start = (currentPage - 1) * itemsPerPage + 1;
            const end = Math.min(currentPage * itemsPerPage, filteredProducts.length);
            const total = filteredProducts.length;
            document.getElementById('paginationInfo').textContent = `Showing ${start} to ${end} of ${total} entries`;
        }

        // Change Page
        function changePage(page) {
            const totalPages = Math.ceil(filteredProducts.length / itemsPerPage);
            if (page < 1 || page > totalPages) return;
            currentPage = page;
            renderTable();
            renderPagination();
        }

        // Toggle Status
        function toggleStatus(productId, toggleElement) {
            const newStatus = toggleElement.checked;
            const product = products.find(p => p.id === productId);
            if (product) {
                product.status = newStatus;
                filteredProducts = filteredProducts.map(p => p.id === productId ? { ...p, status: newStatus } : p);
                Swal.fire({
                    title: 'Status Updated!',
                    text: `Product "${product.name}" is now ${newStatus ? 'listed' : 'unlisted'}.`,
                    icon: 'success',
                    timer: 2000,
                    showConfirmButton: false
                });
            }
        }

        // Delete Product
        function deleteProduct(productId) {
            const product = products.find(p => p.id === productId);
            if (!product) return;

            Swal.fire({
                title: 'Are you sure?',
                text: `You are about to delete the product "${product.name}". This action cannot be undone!`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#ef4444',
                cancelButtonColor: '#6b7280',
                confirmButtonText: '<i class="fas fa-trash me-2"></i>Yes, delete it!',
                cancelButtonText: '<i class="fas fa-times me-2"></i>Cancel'
            }).then(result => {
                if (result.isConfirmed) {
                    products = products.filter(p => p.id !== productId);
                    applyFilters();
                    Swal.fire('Deleted!', `Product "${product.name}" has been deleted.`, 'success');
                }
            });
        }

        // Initialize on Page Load
        document.addEventListener('DOMContentLoaded', function () {
            fetchCategories();
            applyFilters();
        });
    </script>
</body>

</html>